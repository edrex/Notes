Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-07-14T19:44:25-07:00

====== Dat ======

===== hyperdrive/db =====
https://github.com/mafintosh/hyperdb/blob/master/ARCHITECTURE.md
https://github.com/datproject/docs/blob/master/docs/cookbook/using-fs.md

Created Saturday 14 July 2018
[ ] Learn basic dat
	[ ] create a share and publish it with hashbase via the cmd line
	[ ] can two dats be composed into

[ ] Create dat share of html export of notebook
[ ] Share via https gateway 

https://docs.datproject.org/publish
https://docs.datproject.org/server

Single source of truth way of sharing
	instead of all of us puting our changes into one big pool

Most non-standard(decentralized like GIT, IPFS, Camley store), transform them into internal format so if you want to get to data, you have to translate that systemss files
	can mount the filesystems
	twice as much space
	checked out copy and internal copy
DAT indexes your files on disk 
	translate into content adressable storage, etc
can take directory that takes TB storage
	has to scan all files in disk
	has indext that points to files on disk
	run DAT node all the time
	looks at all your shares
	publisher and subscriber
	you are either writer or subscriber
		only one writer logically, one key
		if you add files to share have to be writer
	once you have done that all other nodes don't need to be writer
	You can have a server node
	If a new reader comes online and writer not online, its going to ask network: does anyone have latest updates
	to ensure that when laptop not online 
		to share with Eric: 
			share with laptop, bookmobile, mobile
				laptop may not be online, but bookmobile has latest, 
				eric laptop would get invitation to share
Has versioning into it
	shares are intrinsically versions
	like GIT, different from IPFS
	people can go back to previous versions
	shares are essentially undeletable
Can Fork someone's share
	can merge someone's shares
	like GIT
	Your modified version of my share is a fork of my previous share
Resolving incompatible
	ultimately has to be resolved by user

Also Beaker browser:
https://github.com/beakerbrowser/explore
With Tiddlywiki: https://tiddlywiki.com/static/Saving%2520on%2520Beaker%2520Browser.html

